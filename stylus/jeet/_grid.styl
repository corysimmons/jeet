/**
 * Style an element as a column with a gutter.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [offset=0] - A offset specified as a fraction (see ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle vlue to allow for a new one.
 * @param {number} [gutter=jeet.gutter] - Specifiy the gutter width as a percentage of the containers width.
 */
column(ratios = 1, offset = 0, cycle = 0, uncycle = 0, gutter = jeet.gutter, update = 0)
  side = jeet-get-layout-direction()
  opposite-side = opposite-position(side)
  column_widths = jeet-get-column(ratios, gutter)
  margin_last = 0
  margin_l = margin_last
  margin_r = column_widths[1]

  unless offset == 0
    if offset < 0
      offset *= -1
      offset = jeet-get-column(offset, column_widths[1])[0]
      margin_r = margin_last = offset + column_widths[1] * 2
    else
      offset = jeet-get-column(offset, column_widths[1])[0]
      margin_l = offset + column_widths[1]

  float: side
  width: (column_widths[0])%
  margin-{side}: (margin_l)%
  margin-{opposite-side}: (margin_r)%

  // Only output the non-variable column styles if we are initializing a column
  if update == 0
    cf()
    clear: none
    text-align: inherit
    padding-left: 0
    padding-right: 0

  if uncycle != 0
    &:nth-child({uncycle}n)
      margin-{opposite-side}: (margin_r)%
      float: side
    &:nth-child({uncycle}n + 1)
      clear: none

  if cycle != 0
    &:nth-child({cycle}n)
      margin-{opposite-side}: (margin_last)%
      float: opposite-side
    &:nth-child({cycle}n + 1)
      clear: both
   else
    &:last-child
      margin-{opposite-side}: (margin_last)%

/**
 * An alias for the column mixin.
 */
col = column

/**
 * Alias to directly call a width update on an element.
 */
ucol(ratios = 1, offset = 0, cycle = 0, uncycle = 0, gutter = jeet-gutter, update = 1)
  column(ratios, offset, cycle = 0, uncycle = 0, gutter = jeet-gutter, update = 1)

/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [offset=0] - A offset specified as a fraction (see ratios).
 */
span(ratio = 1, offset = 0)
  side = -get_layout_direction()
  opposite-side = opposite-position(side)
  span_width = -get_span(ratio)
  margin_r = 0
  margin_l = margin_r

  unless offset == 0
    if offset < 0
      offset *= -1
      margin_r = jeet-get-span(offset)
    else
      margin_l = -get_span(offset)

  cf()
  float: side
  clear: none
  padding-left: 0
  padding-right: 0
  text-align: inherit
  width: (span_width)%
  margin-{side}: (margin_l)%
  margin-{opposite-side}: (margin_r)%

/**
 * Reorder columns without altering the HTML.
 * @param {number} [ratios=0] - Specify how far along you want the element to move.
 * @param {string} [col_or_span=column] - Specify whether the element has a gutter or not.
 * @param {number} [gutter=jeet.gutter] - Specifiy the gutter width as a percentage of the containers width.
 */
shift(ratios = 0, col_or_span = column, gutter = jeet.gutter)
  translate = ''
  side = -get_layout_direction()

  if side == right
    ratios = -replace_nth(ratios, 0, ratios[0] * -1)

  if col_or_span == column or col_or_span == col or col_or_span == c
    column_widths = jeet-get-column(ratios, gutter)
    translate = column_widths[0] + column_widths[1]
  else
    translate = -get_span(ratios)

  position: relative
  left: (translate)%

/**
 * Reset an element that has had shift() applied to it.
 */
unshift()
  position: static
  left: 0

/**
 * View the grid and its layers for easy debugging.
 */
edit()
  *
    background: rgba(#000, 5%)
    filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#10000000, endColorstr=#10000000)

/**
 *  Alias for `edit()`
 */
debug = edit

/**
 * Horizontally center an element.
 * @param {number} [max_width=jeet.max-width] - The max width the element can be.
 * @param {number} [pad=0] - Specify the element's left and right padding.
 */
center(max_width = jeet.max-width, pad = 0)
  cf()
  width: auto
  max-width: max_width
  float: none
  display: unquote('block')
  margin-right: auto
  margin-left: auto
  padding-left: pad
  padding-right: pad

/**
 * Uncenter an element.
 */
uncenter()
  max-width: none
  margin-right: 0
  margin-left: 0
  padding-left: 0
  padding-right: 0

/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [pad=0] - Specify the element's left and right padding.
 * @param {bollean/string} [align=false] - Specify the text align for the element.
 */
stack(pad = 0, align = false)
  side = -get_layout_direction()
  opposite-side = opposite-position(side)

  display: unquote('block')
  clear: both
  float: none
  width: 100%
  margin-left: auto
  margin-right: auto

  &:first-child
    margin-{side}: auto

  &:last-child
    margin-{opposite-side}: auto

  if pad != 0
    padding-left: pad
    padding-right: pad

  if (align is not false)
    if (align == center) or (align == c)
      text-align: center
    if (align == left) or (align == l)
      text-align: left
    if (align == right) or (align == r)
      text-align: right

/**
 * Unstack an element.
 */
unstack()
  side = -get_layout_direction()
  opposite-side = opposite-position(side)

  text-align: side
  display: inline
  clear: none
  width: auto
  margin-left: 0
  margin-right: 0

  &:first-child
    margin-{side}: 0

  &:last-child
    margin-{opposite-side}: 0

/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [direction=both] - Specify which axes to center the element on.
 */
align(direction = both)
  position: absolute
  transform-style: preserve-3d

  if (direction == horizontal) or (direction == h)
    left: 50%
    transform: translateX(-50%)
  else if (direction == vertical) or (direction == v)
    top: 50%
    transform: translateY(-50%)
  else
    top: 50%
    left: 50%
    transform: translate(-50%, -50%)

/**
 * Apply a clearfix to an element.
 */
cf()
  *zoom: 1

  &:before, &:after
    content: ''
    display: table

  &:after
    clear: both
