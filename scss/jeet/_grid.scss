// Columns with Gutters
@mixin column(
  $ratios: 1, 
  $offset: 0, 
  $cycle: 0, 
  $uncycle: 0, 
  $gutter: $jeet-gutter
) {
  $side: jeet-get-layout-direction();
  $opposite-side: jeet-opposite-direction($side);
  $column-widths: jeet-get-column($ratios, $gutter);
  $margin-last: 0;
  $margin-l: $margin-last;
  $margin-r: nth($column-widths, 2);
  
  @if $offset != 0 {
    @if $offset < 0 {
      $offset: $offset * -1;
      $offset: nth(jeet-get-column($offset, nth($column-widths, 2)), 1);
      $margin-last: $offset + nth($column-widths, 2) * 2;
      $margin-r: $margin-last;
    } 
    @else {
      $offset: nth(jeet-get-column($offset, nth($column-widths, 2)), 1);
      $margin-l: $offset + nth($column-widths, 2);
    }
  }

  @include cf;
  float: $side;
  display: inline;
  clear: none;
  text-align: inherit;
  padding-left: 0;
  padding-right: 0;
  width: nth($column-widths, 1) * 1%;
  margin-#{$side}: $margin-l * 1%;
  margin-#{$opposite-side}: $margin-r * 1%;
  
  @if $uncycle != 0 {
    &:nth-child(#{$uncycle}n) {
      margin-#{$opposite-side}: $margin-r * 1%;
      float: $side;
    }

    &:nth-child(#{$uncycle}n + 1) {
      clear: none;
    }
  }

  @if $cycle != 0 {
    &:nth-child(#{$cycle}n) {
      margin-#{$opposite-side}: $margin-last * 1%;
      float: $opposite-side;
    }

    &:nth-child(#{$cycle}n + 1) {
      clear: both;
    }
  } 
  @else {
    &:last-child {
      margin-#{$opposite-side}: $margin-last * 1%;
    }
  }
}

// Alias for `column()`
@mixin col($args...) {
  @include column($args...);
}

// Columns without Gutters
@mixin span(
  $ratio: 1, 
  $offset: 0
) {
  $side: jeet-get-layout-direction();
  $opposite-side: jeet-opposite-direction($side);
  $span-width: jeet-get-span($ratio);
  $margin-r: 0;
  $margin-l: $margin-r;
  
  @if $offset != 0 {
    @if $offset < 0 {
      $offset: $offset * -1;
      $margin-r: jeet-get-span($offset);
    } 
    @else {
      $margin-l: jeet-get-span($offset);
    }
  }

  @include cf;
  float: $side;
  display: inline;
  clear: none;
  padding-left: 0;
  padding-right: 0;
  text-align: inherit;
  width: $span-width * 1%;
  margin-#{$side}: $margin-l * 1%;
  margin-#{$opposite-side}: $margin-r * 1%;
}

// Source Ordering
@mixin shift(
  $ratios: 0, 
  $col-or-span: column, 
  $gutter: $jeet-gutter
) {
  $translate: '';
  $side: jeet-get-layout-direction();
  
  @if $side == right {
    $ratios: jeet-replace-nth($ratios, 0, nth($ratios, 1) * -1);
  }

  @if index("column" "col" "c", $col-or-span) {
    $column-widths: jeet-get-column($ratios, $gutter);
    $translate: nth($column-widths, 1) + nth($column-widths, 2);
  } 
  @else {
    $translate: jeet-get-span($ratios);
  }

  position: relative;
  left: $translate * 1%;
}

// Unshifting
@mixin unshift() {
  position: static;
  left: 0;
}

// Edit Mode
@mixin edit() {
  * {
    background: #eee;
    background: rgba(#000, .05);
  }
}

// Alias for `edit()`
@mixin debug() {
  @include edit;
}

// Horizontal Centering Block Elements
@mixin center(
  $max-width: 1410px, 
  $pad: 0
) {
  @include cf;
  width: auto;
  max-width: $max-width;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: $pad;
  padding-right: $pad;
}

// Stacking/Unstacking Elements
@mixin stack(
  $pad: 0, 
  $align: false
) {
  $side: jeet-get-layout-direction();
  $opposite-side: jeet-opposite-direction($side);
  
  display: block;
  clear: both;
  float: none;
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  
  @if $pad != 0 {
    padding-left: $pad;
    padding-right: $pad;
  }
  
  @if ($align is not false) {
    @if index("center" "c", $align) {
      text-align: center;
    }
    @else if index("left" "l", $align) {
      text-align: left;
    }
    @else if index("right" "r", $align) {
      text-align: right;
    }
  }

  &:first-child {
    margin-#{$side}: auto;
  }

  &:last-child {
    margin-#{$opposite-side}: auto;
  }
}

// Unstacking
@mixin unstack() {
  $side: jeet-get-layout-direction();
  $opposite-side: jeet-opposite-direction($side);
  
  text-align: $side;
  display: inline;
  clear: none;
  width: auto;
  margin-left: 0;
  margin-right: 0;
  
  &:first-child {
    margin-#{$side}: 0;
  }
  
  &:last-child {
    margin-#{$opposite-side}: 0;
  }
}

// Horizontal/Vertical/Both Alignment - Parent container needs position relative. IE9+
@mixin align($direction: both) {
  position: absolute;
  
  @if index("horizontal" "h", $direction) {
    @include prefixer(transform, translateX(-50%), webkit ms);
    left: 50%;
  } 
  @else if index("vertical" "v", $direction) {
    @include prefixer(transform, translateY(-50%), webkit ms);
    top: 50%;
  } 
  @else {
    @include prefixer(transform, translate(-50%, -50%), webkit ms);
    top: 50%;
    left: 50%;
  }
}

// Clearfix
@mixin cf() {
  *zoom: 1;

  &:before, &:after {
    content: '';
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Define a rule with all vendor-specific prefixes
@mixin prefixer($property, $value, $vendors: webkit moz ms o) {
  @each $vendor in $vendors {
    #{'-' + $vendor + '-' + $property}: $value;
  }

  #{$property}: $value;
}

