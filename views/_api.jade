.close-api.toggle-api
.pushy.pushy-left
  .api
    :markdown
      Interactive API.
      ================
      A sub head. Lorem ipsum dolor sit amet.
      ---------------------------------------

      ### column ###
      *`(ratios = 1, offset = 0, cycle = 0, uncycle = 0, gutter = jeet-gutter)`*

      `column` (also aliased as `col`) is perhaps the strongest feature of any grid system on the market. You specify an initial ratio, either as fractions or decimals, then pass the parent container's context ratio to maintain consistent gutters as you nest.

      Offsetting is made trivial as well. Just specify a ratio to make your offset have a margin-left. Make it negative to give it a margin-right instead. E.g. `column(1/4, offset: 1/4)` would create a column the quarter of the size of it's container and push it to the right a quarter.

      `cycle` and `uncycle` are pretty awesome in their own right as well. Want to make a gallery but don't want to specify a row every 4 pictures? `column(1/4, cycle: 4)` - done. Want to change it up when you get down to mobile? Maybe just show 2 images per row? `uncycle` your 4-item cycle then... `column(1/2, uncycle: 4, cycle: 2)` - done.

      Need to adjust column gutters for a specific container? `col(1/4, gutter: .5)`
    
    a.btn.view-example(data-scroll-goto='1', data-example='column-example') View an example

    :markdown
      ### span ###
      *`(ratio = 1, offset = 0)`*

      Need a grid without the gutters? For instance, for a horizontal navigation where you want buttons touching. Do so like: `span(1/5)`. No need to pass more than one ratio since we don't need to worry about the math involved with gutters and all that.
    
    a.btn.view-example(data-scroll-goto='2', data-example='span-example') View an example

    :markdown
      ### shift ###
      *`(ratios = 0, col_or_span = column, gutter = jeet-gutter)`*

      Source ordering works in Jeet by assigning `position: relative` and then a `left` offset equal to the ratio passed. You can specify if this is a column or span shift to include gutters or not. This works similar to offset in that it can accept negative values to shift the other direction.

      Again, `shift` can accept multiple context ratios to maintain perfect sizing.

      `shift` also accepts custom gutter sizing, just make sure your gutter sizes match the gutter sizes of your original elements.
    
    a.btn.view-example(data-scroll-goto='5', data-example='shift-example') View an example

    :markdown
      ### unshift ###
      *`()`*

      Accepts no values but isn't a block closer either. `unshift()` is a great helper function to quickly disable whatever source ordering you've done to an element.
    
    :markdown
      ### edit ###
      *`()`*

      Edit mode assigns a light gray, semi-transparent, background to every element on the page. It's a little trick picked up over the years that makes visualizing the structure of your site trivial.
    
    a.btn.view-example(data-scroll-goto='1', data-example='edit-example') View an example

    :markdown
      ### center ###
      *`(max_width = 1410px, pad = 0)`*

      This is a shortcut to easily center containers. The `pad` variable sets padding on the left and right.
    
    a.btn.view-example(data-scroll-goto='6', data-example='center-example') View an example

    :markdown
      ### stack ###
      *`(pad = 0, align = center)`*

      A helper mixin to "stack" elements on top of each other. Useful for mobile views. Accepts padding and/or text alignment.

      (resize your browser when viewing the example to see this in action)
    
    a.btn.view-example(data-scroll-goto='3', data-example='stack-example') View an example

    :markdown
      ### unstack ###
      *`()`*

      Cancel that `stack()`. Note: This won't revert back to your `column()` calls. For that, manually call your `column()` method again.
    
      (resize your browser to a mobile viewport when viewing the example to see this in action)

    :markdown
      ### align ###
      *`(direction = both)`*

      Aligning blocks relative to their container with `position: absolute` and fancy positioning and `transform`. Vertical alignment is now trivial in IE9+ browsers.
    
    a.btn.view-example(data-scroll-goto='7', data-example='align-example') View an example

    :markdown
      ### $cf ###
      
      The clearfix placeholder saves space on repetitive use of clearfix. Use clearfix anywhere like so: `@extend $cf`
