@import 'jeet/normalize.css';
@import 'compass';
@import 'jeet/settings';

@mixin bs{
    box-sizing: border-box;
    *behavior: url(js/vendor/boxsizing.htc);
}
*{
    @include bs;
}
html{
    overflow-y: scroll;
    overflow-x: hidden; 
}
.placeholder{
    color: #aaa;
}
img, video, audio, embed, object, input, iframe{
    max-width: 100%;
}
@mixin last{
    margin-right: 0;
}
.last{
    @include last;
}
$gridsystem_width: ($column_width + $gutter_width) * $columns;
$total_width: 100%;
$min_width: $max_width;
$correction: ( 0.5 / $min-width * 100px * 1%);
@mixin cf{
    *zoom: 1;
    &:before, &:after{
        content: "";
        display: table;
    }
    &:after{
        clear: both;
    }
}
body{
    @include cf;
    width: 100%;
}

@mixin col($x, $center: f, $last: l){
    @include cf;
    display: inline;
    float: left;
    width: $total_width * (((($gutter_width + $column_width ) * $x) - $gutter_width) / ($gridsystem_width - $gutter_width));
    margin-right: ($total_width * (( $gutter_width * 0.5 ) / ($gridsystem_width - $gutter_width))) * 2;
    *width: $total_width * (((($gutter_width + $column_width ) * $x) - $gutter_width) / $gridsystem_width) - ($correction * 2);
    *margin-right: ($total_width * (( $gutter_width * 0.5 ) / $gridsystem_width) - $correction) * 2;
    &:last-child{
        @include last;
    }
    @if $center == c {
        float: none;
        display: block;
        margin-right: auto !important;
        margin-left: auto !important;
        *margin-right: auto !important;
        *margin-left: auto !important;
    }
    @if $last == f {
        &:last-child{
            margin-right: ($total_width * ( ($gutter_width * 0.5) / ($gridsystem_width - $gutter_width))) * 2;
            *margin-right: ($total_width * ( ($gutter_width * 0.5) / $gridsystem_width) - $correction) * 2;
        }
    }
}
$unit: ($total_width * ( ($gutter_width * 0.5) / ($gridsystem_width - $gutter_width))) * 2;
@mixin span($x, $center: f){
    @include cf;
    display: inline;
    float: left;
    width: $total_width * (((($gutter_width + $column_width ) * $x)) / $gridsystem_width);
    *width: $total_width * (((($gutter_width + $column_width ) * $x)) / $gridsystem_width)-$correction;
    *behavior: url(js/vendor/boxsizing.htc);
    @if $center == c {
        float: none;
        display: block;
        margin-right: auto !important;
        margin-left: auto !important;
        *margin-right: auto !important;
        *margin-left: auto !important;
    }
}
@mixin offset($offset: 1){
    margin-left: (($total_width * ( ($gutter_width * 0.5) / ($gridsystem_width - $gutter_width))) * 4) * $offset;
}
@mixin center($mw: $max_width, $p: $max_width_padding){
    @include cf;
    max-width: $mw;
    margin-left: auto;
    margin-right: auto;
    padding-left: $p;
    padding-right: $p;
}
.center{
    @include center;
}
@mixin stack($align: c){
    display: block;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 2%;
    @if $align == c {
        text-align: center;
    }
    @if $align == l {
        text-align: left;
    }
    @if $align == r {
        text-align: right;
    }
}

@mixin bp($w: 705px, $mobile_first: false){
    @if $mobile_first == mf {
        @media all and (min-width: $w){@content};
    }
    @else{
        @media all and (min-width: $w){@content};
    }
}